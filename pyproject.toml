[tool.poetry]
name = "feature_analysis"
version = "0.1.0"
description = "Analysis of features using t-SNE, UMAP and Captum"
authors = ["Suneeta Mall <suneeta.mall@xxxxxx.com>"]

[tool.poetry.scripts]
start_trainer = "feature_analysis.app:start_trainer"


[tool.poe.tasks]
enable_cuda13 = "python -m pip install --no-cache-dir torch==1.11+cu113 torchvision==0.12+cu113 --extra-index-url https://download.pytorch.org/whl/cu113"


## Ideally we want to use secondary channel for cuda wheels for torch
## but this is a new feature marred with bugs see: https://github.com/python-poetry/poetry/issues/4704,
## once its fixed, things would be cakewalk and uncomment section in dependencies around torch
#[[tool.poetry.source]]
#name = "internal"
#url = "https://download.pytorch.org/whl/cu113"
#secondary = true
#default = false


[tool.poetry.dependencies]
python = ">=3.8,<3.11"
requests = "^2.25.1"
pydantic = {version = "^1.8.2", extras = ["email"]}
boto3 = "^1.20.14"
wandb = "^0.12"
typer = "^0.4"
tensorboard = "^2.8.0"
pandas = "^1.4.0"
torchmetrics = "^0.7.1"
pytorch-lightning = "^1.5.10"
rich = "^11.2.0"
setuptools = "59.5.0" # see https://github.com/pytorch/pytorch/pull/69904
isort = "^5.9.3"
hydra-core = "^1.1.1"
Pillow = "^9.0.0"
h5py = "^3.6.0"
## TODO: When the issue with secondary source is fixed, enable following snippt and get rid of above #FIXME
# torch = [
#     { version = "=1.11+cu113", source = "pytorch" , markers="sys_platform == 'linux'" },
#     { version = "^1.11.0", markers = "sys_platform == 'darwin' or sys_platform == 'win32'"},
# ]
# torchvision = [
#     { version = "=0.12+cu113", source = "pytorch", markers="sys_platform == 'linux'" },
#     { version = "^0.12.0", markers = "sys_platform == 'darwin' or sys_platform == 'win32'" },
# ]
torch = "^1.11.0"
torchvision = "^0.12.0"
torch-tb-profiler = "^0.4.0"
jupyter = "^1.0.0"
plotnine = "^0.8.0"
sklearn = "^0.0"
matplotlib = "^3.5.1"
umap-learn = "^0.5.3"
datashader = "^0.13.0"
bokeh = "^2.4.2"
holoviews = "^1.14.8"
scikit-image = "^0.19.2"
colorcet = "^3.0.0"
captum = "^0.5.0"
tensorflow = "^2.8.0"


[tool.poetry.dev-dependencies]
pytest = "^5.2"
pylint = "^2.12.2"
isort = "^5.10.1"
black = {extras = ["jupyter"], version = "^22.1.0"}
pre-commit = "^2.17.0"
pytest-cov = "^3.0.0"
pytest-mock = "^3.7.0"
freezegun = "^1.2.0"
moto = "^3.1.0"
mypy = "^0.941"
anaconda-client = "^1.2.2"
python-semantic-release = "^7.27.0"
poethepoet = "^0.13.1"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = [
    "./tests/*"
]
markers = [
    "integration: marks tests as integration (deselect with '-m \"not integration\"')",
]
norecursedirs = [
    ".git",
    "dist",
]
cache_dir = "/tmp/.pytest_cache"


[tool.coverage.run]
source = ['feature_analysis']

[tool.isort]
line_length = 120
sections=['FUTURE', 'STDLIB', 'THIRDPARTY', 'FIRSTPARTY', 'LOCALFOLDER']
force_alphabetical_sort_within_sections=true
use_parentheses=true
force_grid_wrap=false
include_trailing_comma=true
multi_line_output=3


[tool.black]
line-length = 120


[tool.mypy]
python_version = 3.8
explicit_package_bases  = true
namespace_packages = true
exclude = [
    "tests"
]


[tool.semantic_release]
# This is done inline with this https://mestrak.com/blog/semantic-release-with-python-poetry-github-actions-20nn
# but semvar versioning is picking weird auto tags so WIP for later
version_variable = [
    "feature_analysis/__init__.py:__version__",
    "pyproject.toml:version"
]
branch = "master"
upload_to_pypi = false
upload_to_release = true
build_command = "pip install poetry && poetry build"
